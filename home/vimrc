" Buck's vimrc
" ------------

set nocompatible


filetype off " required for Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'L9'
Plugin 'tComment'

Plugin 'jlanzarotta/bufexplorer'
Plugin 'scrooloose/nerdtree'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'gregf/ultisnips-chef'
Plugin 'kien/ctrlp.vim'

Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-fireplace'
" Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'

Plugin 'vim-syntastic/syntastic'
Plugin 'guns/vim-slamhound'
Plugin 'guns/vim-sexp'
Plugin 'tpope/vim-sexp-mappings-for-regular-people'

Plugin 'hashivim/vim-terraform'

Plugin 'tmhedberg/matchit'
Plugin 'gregsexton/MatchTag'
Plugin 'machakann/vim-swap'

Plugin 'haproxy'
Plugin 'vim-coffee-script'

Plugin 'Yggdroot/indentLine'
Plugin 'AndrewRadev/sideways.vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'jiangmiao/auto-pairs'
Plugin 'taglist.vim'
Plugin 'Valloric/YouCompleteMe'

call vundle#end()


filetype plugin indent on
syntax enable

let mapleader = ","

colorscheme default
set background=dark

""" See :help 'option' for details on any option below

" tab settings -------------------------------------------------------------->
set autoindent " Uses indent from current line as indent for new line
set expandtab " Inserts spaces instead of actual tabs
set shiftwidth=4 " The number of columns to use when auto-indenting lines
set tabstop=4 " Determines the number of columns to use when showing actual
              " tab characters
" set softtabstop=4 " Determines the number of columns that will be inserted or
                  " deleted when you hit the tab key. Will use a mixture of
                  " spaces and tabs when expandtab is not set.
set smarttab " Uses the value of shiftwidth when inserting or deleting tabs
             " at the beginnings of lines (in more practical terms, it allows
             " you to treat tabs that were expanded into spaces as tabs, but
             " only when they are at the beginning of a line).
             " When using softtabstop and expand tab, smarttab doesn't need
             " to be used
" From my understand, the fundamental difference between tabstop and
" softtabstop is that tabstop determines the behavior of actual tab characters
" (<Tab>). If neither expandtab nor softtabstop are set, then using the tab
" key will just insert the <Tab> character and use the value of tabstop to
" determine how wide the tab will be.
" On the other hand, softtabstop takes over when the tab key on your keyboard
" is pressed. If your softtabstop is set to 4 and tabstop is set to 8, then
" hitting tab will insert 4 columns for you (the value of softtabstop).
" However, since this isn't enough to be a tab character, it will use spaces
" to achieve those 4 columns.

" mapping to toggle spaces/tabs. This should work fine, but I haven't figured
" out under what circumstances behaviors will be exactly the same.
nmap <Leader>t :setlocal expandtab!<CR>
" <---------------------------------------------------------------------------

set rnu
set bs=2
set laststatus=2
set hidden
set list
set listchars=tab:>\ ,trail:.
set incsearch
set hlsearch
set ignorecase
set smartcase
set mouse=
set splitbelow
set splitright
set noswapfile
set completeopt=menu,preview
set complete-=t,i
" set colorcolumn=80
set wildmenu
set formatoptions+=j
" set cursorline
" set cursorcolumn
set nojoinspaces
set modeline

set statusline=%f\ %m%r " filename, modified flag, and readonly flag
set statusline+=%= " left/right separator
set statusline+=[%{strlen(&ft)?&ft:'none'}] " filetype
set statusline+=[%{&ff}] " file format (ie. line endings)
set statusline+=[%{strlen(&fenc)?&fenc:'none'}] " encoding
set statusline+=\ \|\ " a separator
set statusline+=col\ %c\  " column number
set statusline+=line\ %l\ of\ %L " line number
" for more about customizing the status bar, see
" http://got-ravings.blogspot.com/2008/08/vim-pr0n-making-statuslines-that-own.html

autocmd BufEnter * set list " make sure visual whitespace is always shown

" jump to last position on previous close
autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

autocmd FileType php set keywordprg=pman

" Start in insert mode when using the command window. See :help q:
autocmd CmdwinEnter [/?]  startinsert

autocmd BufWritePost *.py silent! !~/bin/build-tags

" general key mappings --------------------------------------------------------

nnoremap <Leader>p :set paste<cr>
nnoremap <Leader>P :set nopaste<cr>

" Change 'Y' to copy to end of line to be similar to D and C
nnoremap Y y$

" Ctrl-6 does not work on Mac
nnoremap <Leader>6 :e#<CR>

" Keys for more efficient saving
nmap <F11> :wqa<CR>
nmap <F12> :wa<CR>

" line movement mappings from http://vim.wikia.com/wiki/Moving_lines_up_or_down
" Use Alt-j or Alt-k to move lines up or down, respectively
nnoremap <A-j> :m+<CR>==
inoremap <A-j> <Esc>:m+<CR>==gi
vnoremap <A-j> :m'>+<CR>gv=gv
nnoremap <A-k> :m-2<CR>==
inoremap <A-k> <Esc>:m-2<CR>==gi
vnoremap <A-k> :m-2<CR>gv=gv

inoremap <A-e> Ã«

" Proper Ctrl+C -> Esc map
map <C-c> <Esc>
imap <C-c> <Esc>

" Remove trailing whitespace
nmap <Leader>w :%s/\s\+$//<CR>

" A bit tricky to explain: will put you insert mode on the next line (like
" doing just 'o', but will also put an extra blank line below this new line.
nnoremap <Leader>o o<esc>O

" Search for the word under the cursor, but stay on the current instance of it
nnoremap <Leader>n *N

" Clear search highlighting
nnoremap <Leader>, :noh

" Execute the current line with bash
nnoremap <Leader>x :.w !bash<CR>

autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType clojure setlocal iskeyword+=>
" autocmd FileType clojure setlocal iskeyword-=/
autocmd FileType clojure setlocal iskeyword-=,
" autocmd FileType clojure setlocal iskeyword-=.
autocmd FileType clojure setlocal shiftwidth=2
autocmd FileType clojure setlocal lispwords+=facts,fact
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
autocmd FileType java setlocal omnifunc=javacomplete#Complete
autocmd FileType markdown setlocal spell
autocmd FileType gitcommit setlocal spell
autocmd BufNewFile,BufRead *.clj,*.c,*.html,*.js,*.coffee,*.json,*.rb,*.tf,*.tfvars,*.yml setlocal shiftwidth=2
autocmd BufNewFile,BufRead Makefile,*.php setlocal noexpandtab
autocmd BufNewFile,BufRead *.pp,Vagrantfile set filetype=ruby
autocmd BufNewFile,BufRead *.edn set filetype=clojure
autocmd BufNewFile,BufRead *.md set filetype=markdown
autocmd BufNewFile,BufRead *.ino set filetype=c
autocmd BufNewFile,BufRead *.json set filetype=json

" -----------------------------------------------------------------------------
" Plugin settings and mappings
" -----------------------------------------------------------------------------

" Tips for getting header/source switch came from
" http://vim.wikia.com/wiki/Easily_switch_between_source_and_header_file
" mappings for a.vim
nnoremap <F4> :A<CR>

" NERDTree settings and mappings
let NERDTreeIgnore=['\.swp$', '\.orig$', '\.pyc$', '\.class$', '__pycache__',
                \   '\.swo$', '\.sass-cache', '\.egg-info', '^node_modules$', '^dist$']
let NERDTreeShowHidden=1 " show hidden files
let NERDTreeChDirMode=2 " change directory whenever NERDTree does
let NERDTreeShowLineNumbers=1
let NERDTreeShowBookmarks=1
" mapping to open NERDTree
nnoremap <F5> :NERDTreeToggle<CR>
" find the current file in NerdTree
map <leader>r :NERDTreeFind<CR>

" supertab -------------------------------------------------------------------
" kick off supertab with space
let g:SuperTabDefaultCompletionType = '<c-x><c-o>'
let g:SuperTabMappingForward = '<C-Space>'
let g:SuperTabMappingBackward = '<S-C-Space>'

" OmniCppComplete settings ---------------------------------------------------
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::o

" ctrlp ----------------------------------------------------------------------
let g:ctrlp_cmd = 'CtrlPLastMode'
let g:ctrlp_custom_ignore = {
    \ 'dir': '\.git$\|\.hg$\|\.venv$\|build$\|\.compiled$\|\.awesomo$\|node_modules$\|bower.*$\|\.cljs_rhino_repl\|target\|\.pelican\.*\|berks-cookbooks',
    \ 'file': '\.swp$\|\.pyc$\|resources.*compiled',
    \ }
let g:ctrlp_by_filename = 1 " default to filename search instead of full path
let g:ctrlp_regexp = 1 " default to regexp search
let g:ctrlp_working_path_mode = 0

" taglist --------------------------------------------------------------------
let Tlist_Use_Right_Window = 1 " place taglist window on the right
let Tlist_Display_Prototype = 1 " show prototypes instead of tags
" mapping to open taglist
nmap <F7> :TlistToggle<CR>

" UltiSnips ------------------------------------------------------------------
let g:UltiSnipsSnippetDirectories = ["UltiSnips", "bucks_snippets", "bundle/ultisnips-chef/UltiSnips"]
let g:UltiSnipsExpandTrigger = "<c-e>"
let g:UltiSnipsJumpForwardTrigger = "<c-e>"
let g:UltiSnipsJumpBackwardTrigger = "<c-z>"

" VimClojure -----------------------------------------------------------------
" notes on setup:
"http://naleid.com/blog/2011/12/19/getting-a-clojure-repl-in-vim-with-vimclojure-nailgun-and-leiningen/
let g:vimclojure#HighlightBuiltins = 1
let g:vimclojure#ParenRainbow = 1
let g:vimclojure#NailgunClient = expand("~/bin/ng")
let g:vimclojure#WantNailgun = 0
let g:vimclojure#SplitPos = "right"
let g:vimclojure#SplitSize = 70

" Syntastic ------------------------------------------------------------------
let g:syntastic_javascript_checkers = ["jslint"]
let g:syntastic_json_checkers = ["jsonlint"]
let g:syntastic_php_checkers = ["php"] " don't use phpcs (which does style checking)
let g:syntastic_python_python_exec = "/usr/bin/python3"

" Fireplace ------------------------------------------------------------------
" nmap <LocalLeader>e :Eval<CR>

" SLIME ----------------------------------------------------------------------
let g:slime_target = "tmux"
let g:slime_python_ipython = 1

" Functions ------------------------------------------------------------------
map <F9> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

cmap w!! w !sudo tee > /dev/null %

function! SyntasticLeinClasspath()
    silent !clear
    let g:syntastic_java_javac_classpath = system("lein classpath")
endfunction

" Tagbar ---------------------------------------------------------------------
let g:tagbar_type_haskell = {
    \ 'ctagsbin'  : 'hasktags',
    \ 'ctagsargs' : '-x -c -o-',
    \ 'kinds'     : [
        \  'm:modules:0:1',
        \  'd:data: 0:1',
        \  'd_gadt: data gadt:0:1',
        \  't:type names:0:1',
        \  'nt:new types:0:1',
        \  'c:classes:0:1',
        \  'cons:constructors:1:1',
        \  'c_gadt:constructor gadt:1:1',
        \  'c_a:constructor accessors:1:1',
        \  'ft:function types:1:1',
        \  'fi:function implementations:0:1',
        \  'o:others:0:1'
    \ ],
    \ 'sro'        : '.',
    \ 'kind2scope' : {
        \ 'm' : 'module',
        \ 'c' : 'class',
        \ 'd' : 'data',
        \ 't' : 'type'
    \ },
    \ 'scope2kind' : {
        \ 'module' : 'm',
        \ 'class'  : 'c',
        \ 'data'   : 'd',
        \ 'type'   : 't'
    \ }
\ }

" indentLine -----------------------------------------------------------------
let g:indentLine_enabled = 0

" cljfmt ---------------------------------------------------------------------
let g:clj_fmt_autosave = 0

" vim-tmux-navigator ---------------------------------------------------------
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>


function! ClojureClasspath()
    let l:classpath = system("lein classpath")
    let g:syntastic_java_javac_classpath = l:classpath
    let g:JavaComplete_LibsPath = l:classpath
endfunction
